makeCacheMatrix <- function(x = matrix()) {
  ## First function, does the following four things:
  ## x defines an invertible matrix
  inv = NULL
  set = function(y) {
    x <<- y
    inv <<- NULL
  }
  ##  1) Sets a matrix
  get = function() x
  ##  2) Gets a matrix
  setinv = function(inverse) inv <<- inverse
  ##  3) Sets an inverse of the matrix; <<- used to assign inv as inverse in the subfunction environment
  getinv = function() inv
  ##  4) Gets said inverse
  list(set=set, get=get, setinv=setinv, getinv=getinv)
}

cacheSolve <- function(x, ...) {
  ## Second function that caches the results of the makeCacheMatrix() function
  inv = x$getinv()
  if (!is.null(inv)) {
    message("Getting Cached Data")
    return(inv)
  }
  ## Above subfunction gets results from the cache IF the inverse has already been calculated, skipping computation
  ## Otherwise, still computes the inverse if not, using the code below
  mat.data = x$get()
  inv = solve(mat.data, ...)
  x$setinv(inv)
  ## Sets inverse's value in the cache with setinv() function
  return(inv)
}
